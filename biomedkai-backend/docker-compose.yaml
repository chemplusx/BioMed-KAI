version: '3.8'

services:
  # Neo4j Knowledge Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: biomedkai-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"   # HTTP
      - "7687:7687"   # Bolt
    environment:
      - NEO4J_AUTH=neo4j/biomedkai123
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_default__listen__address=0.0.0.0
      - NEO4J_dbms_connector_https_advertised__address=localhost:7473
      - NEO4J_dbms_connector_http_advertised__address=localhost:7474
      - NEO4J_dbms_connector_bolt_advertised__address=localhost:7687
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - biomedkai-network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p biomedkai123 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7.2-alpine
    container_name: biomedkai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass biomedkai123
    volumes:
      - redis_data:/data
    networks:
      - biomedkai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Vector Database for RAG (using Qdrant)
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: biomedkai-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"   # HTTP API
      - "6334:6334"   # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - biomedkai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # BioMedKAI Backend - Agentic RAG System
  biomedkai-backend:
    build: 
      context: ./biomedkai-backend
      dockerfile: Dockerfile
    container_name: biomedkai-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database connections
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=biomedkai123
      - REDIS_URL=redis://:biomedkai123@redis:6379/0
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      
      # Application settings
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DEBUG=false
      
      # AI/ML Model settings
      - MODEL_CACHE_DIR=/app/models
      - MAX_WORKERS=4
      - AGENT_TIMEOUT=300
      
      # Security
      - SECRET_KEY=your-secret-key-change-this
      - JWT_SECRET=your-jwt-secret-change-this
      
      # External API keys (set these in .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY:-}
      
    volumes:
      - ./biomedkai-backend:/app
      - biomedkai_models:/app/models
      - biomedkai_cache:/app/cache
      - biomedkai_logs:/app/logs
      - biomedkai_data:/app/data
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - biomedkai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s

  # Frontend Web Application (Go server)
  biomedkai-webapp:
    build: 
      context: ./webapp
      dockerfile: Dockerfile
    container_name: biomedkai-webapp
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - BACKEND_URL=http://biomedkai-backend:8000
      - ENVIRONMENT=production
    volumes:
      - ./webapp:/app
    depends_on:
      - biomedkai-backend
    networks:
      - biomedkai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: biomedkai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - biomedkai-webapp
      - biomedkai-backend
    networks:
      - biomedkai-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: biomedkai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - biomedkai-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: biomedkai-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=biomedkai123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - biomedkai-network
    profiles:
      - monitoring

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  biomedkai_models:
    driver: local
  biomedkai_cache:
    driver: local
  biomedkai_logs:
    driver: local
  biomedkai_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  biomedkai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16